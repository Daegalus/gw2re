#include <FileReference.bt>
#include <PackFile.bt>

FSeek(0);
PackFile cmpcPackFile(0, FileSize());

if (cmpcPackFile.chunk.header.magic == "comp")
{
    FSeek(startof(cmpcPackFile.chunk.data));
    struct
    {
        struct
        {
            uint32 unknown1;
            uint32 unknown2;
            uint32 nbOfRecords1;
            uint32 offsetToRecords1;
            uint32 nbOfRecords2;
            uint32 offsetToRecords2;
            uint32 nbOfRecords3;
            uint32 offsetToRecords3;
        } header;

        FSeek(startof(header.offsetToRecords1) + header.offsetToRecords1);
        struct 
        {
            uint32 offsetToName;
            FSeek(startof(offsetToName) + offsetToName);
            wstring name;
            FSeek(startof(offsetToName) + sizeof(offsetToName));
            uint32 unknown1;
            uint32 unknown2;
            uint32 nbOfData1;
            uint32 offsetToData1;
            FSeek(startof(offsetToData1) + offsetToData1);
            ubyte data1[nbOfData1];
            FSeek(startof(offsetToData1) + sizeof(offsetToData1));
            uint32 nbOfData2;
            uint32 offsetToData2;
            FSeek(startof(offsetToData2) + offsetToData2);
            struct
            {
                uint32 unknown[4];
            } data2[nbOfData2];
            FSeek(startof(offsetToData2) + sizeof(offsetToData2));
        } records1[header.nbOfRecords1]<optimize=false>;

        FSeek(startof(header.offsetToRecords2) + header.offsetToRecords2);
        struct 
        {
            uint32 nbOfData1;
            uint32 offsetToData1;
            FSeek(startof(offsetToData1) + offsetToData1);
            struct
            {
                uint32 unknown[3];
                uint32 nbOfData;
                uint32 offsetToData;
                if (offsetToData != 0)
                {
                    FSeek(startof(offsetToData) + offsetToData);
                    struct
                    {
                        ubyte unknown[53];
                    } data[nbOfData];
                    FSeek(startof(offsetToData) + sizeof(offsetToData));
                }
            } data1[nbOfData1]<optimize=false>;
            FSeek(startof(offsetToData1) + sizeof(offsetToData1));
            uint32 nbOfData2;
            uint32 offsetToData2;
            if (offsetToData2 != 0)
            {
                FSeek(startof(offsetToData2) + offsetToData2);
                struct
                {
                    uint32 unknown[3];
                } data2[nbOfData2];
                FSeek(startof(offsetToData2) + sizeof(offsetToData2));
            }
        } records2[header.nbOfRecords2]<optimize=false>;

        
        FSeek(startof(header.offsetToRecords3) + header.offsetToRecords3);
        struct 
        {
            uint32 offsetToName1;
            FSeek(startof(offsetToName1) + offsetToName1);
            wstring name1;
            FSeek(startof(offsetToName1) + sizeof(offsetToName1));
            uint32 unknown1[4];
            uint32 nbOfData1;
            uint32 offsetToData1;
            if (offsetToData1 != 0)
            {
                FSeek(startof(offsetToData1) + offsetToData1);
                struct
                {
                    uint32 unknown[2];
                } data1[nbOfData1];
                FSeek(startof(offsetToData1) + sizeof(offsetToData1));
            }
            uint32 nbOfData2;
            uint32 offsetToData2;
            if (offsetToData2 != 0)
            {
                FSeek(startof(offsetToData2) + offsetToData2);
                struct
                {
                    uint32 nbOfData1;
                    uint32 offsetToData1;
                    if (offsetToData1 != 0)
                    {
                        FSeek(startof(offsetToData1) + offsetToData1);
                        struct
                        {
                            uint32 unknown[3];
                            uint32 nbOfData;
                            uint32 offsetToData;
                            if (offsetToData != 0)
                            {
                                FSeek(startof(offsetToData) + offsetToData);
                                struct
                                {
                                    ubyte unknown[53];
                                } data[nbOfData];
                                FSeek(startof(offsetToData) + sizeof(offsetToData));
                            }
                        } data1[nbOfData1]<optimize=false>;
                        FSeek(startof(offsetToData1) + sizeof(offsetToData1));
                    }
                    uint32 nbOfData2;
                    uint32 offsetToData2;
                    if (offsetToData2 != 0)
                    {
                        FSeek(startof(offsetToData2) + offsetToData2);
                        struct
                        {
                            uint32 unknown[3];
                        } data2[nbOfData2];
                        FSeek(startof(offsetToData2) + sizeof(offsetToData2));
                    }
                } data2[nbOfData2]<optimize=false>;
                FSeek(startof(offsetToData2) + sizeof(offsetToData2));
            }
            uint32 nbOfData3;
            uint32 offsetToData3;
            if (offsetToData3 != 0)
            {
                FSeek(startof(offsetToData3) + offsetToData3);
                struct
                {
                    uint32 offsetToName;
                    FSeek(startof(offsetToName) + offsetToName);
                    wstring name;
                    FSeek(startof(offsetToName) + sizeof(offsetToName));
                } data3[nbOfData3]<optimize=false>;
                FSeek(startof(offsetToData3) + sizeof(offsetToData3));
            }
            uint32 nbOfData4;
            uint32 offsetToData4;
            if (offsetToData4 != 0)
            {
                FSeek(startof(offsetToData4) + offsetToData4);
                struct
                {
                    uint32 unknown[2];
                } data4[nbOfData4];
                FSeek(startof(offsetToData4) + sizeof(offsetToData4));
            }
            uint32 offsetToName2;
            FSeek(startof(offsetToName2) + offsetToName2);
            wstring name2;
            FSeek(startof(offsetToName2) + sizeof(offsetToName2));
            uint32 nbOfData5;
            uint32 offsetToData5;
            if (offsetToData5 != 0)
            {
                FSeek(startof(offsetToData5) + offsetToData5);
                struct
                {
                    uint32 nbOfData1;
                    uint32 offsetToData1;
                    if (offsetToData1 != 0)
                    {
                        FSeek(startof(offsetToData1) + offsetToData1);
                        struct
                        {
                            uint32 unknown[3];
                            uint32 nbOfData;
                            uint32 offsetToData;
                            if (offsetToData != 0)
                            {
                                FSeek(startof(offsetToData) + offsetToData);
                                struct
                                {
                                    uint32 unknown[14];
                                } data[nbOfData];
                                FSeek(startof(offsetToData) + sizeof(offsetToData));
                            }
                        } data1[nbOfData1]<optimize=false>;
                        FSeek(startof(offsetToData1) + sizeof(offsetToData1));
                    }
                    uint32 nbOfData2;
                    uint32 offsetToData2;
                } data5[nbOfData5]<optimize=false>;
                FSeek(startof(offsetToData5) + sizeof(offsetToData5));
            }
            uint32 nbOfData6;
            uint32 offsetToData6;
            if (offsetToData6 != 0)
            {
                FSeek(startof(offsetToData6) + offsetToData6);
                struct
                {
                    uint32 unknown[2];
                } data6[nbOfData6];
                FSeek(startof(offsetToData6) + sizeof(offsetToData6));
            }
            uint32 nbOfData7;
            uint32 offsetToData7;
            if (offsetToData7 != 0)
            {
                FSeek(startof(offsetToData7) + offsetToData7);
                struct
                {
                    uint32 unknown1[2];
                    uint16 unknown2;
                    struct
                    {
                        uint32 offset;
                        if (offset != 0)
                        {
                            FSeek(startof(offset) + offset);
                            FileReference fileReference<read=readFileReference>;
                            FSeek(startof(offset) + sizeof(offset));
                        }
                    } offsetToFileReference[9]<optimize=false>;
                    uint32 unknown3[3];
                    ubyte unknown4;
                } data7[nbOfData7]<optimize=false>;
                FSeek(startof(offsetToData7) + sizeof(offsetToData7));
            }
            uint32 unknown2;
            uint32 nbOfData8;
            uint32 offsetToData8;
            if (offsetToData8 != 0)
            {
                FSeek(startof(offsetToData8) + offsetToData8);
                struct
                {
                    uint32 unknown[2];
                } data8[nbOfData8];
                FSeek(startof(offsetToData8) + sizeof(offsetToData8));
            }
            uint32 offsetToName3;
            FSeek(startof(offsetToName3) + offsetToName3);
            wstring name3;
            FSeek(startof(offsetToName3) + sizeof(offsetToName3));
            uint32 offsetToFileReference1;
            if (offsetToFileReference1 != 0)
            {
                FSeek(startof(offsetToFileReference1) + offsetToFileReference1);
                FileReference fileReference1<read=readFileReference>;
                FSeek(startof(offsetToFileReference1) + sizeof(offsetToFileReference1));
            }
            uint32 nbOfData9;
            uint32 offsetToData9;
            if (offsetToData9 != 0)
            {
                FSeek(startof(offsetToData9) + offsetToData9);
                struct
                {
                    struct
                    {
                        uint32 offset;
                        if (offset != 0)
                        {
                            FSeek(startof(offset) + offset);
                            FileReference fileReference<read=readFileReference>;
                            FSeek(startof(offset) + sizeof(offset));
                        }
                    } offsetToFileReference[6]<optimize=false>;
                } data9[nbOfData9]<optimize=false>;
                FSeek(startof(offsetToData9) + sizeof(offsetToData9));
            }
            uint32 offsetToName4;
            FSeek(startof(offsetToName4) + offsetToName4);
            wstring name4;
            FSeek(startof(offsetToName4) + sizeof(offsetToName4));
            uint32 offsetToName5;
            FSeek(startof(offsetToName5) + offsetToName5);
            wstring name5;
            FSeek(startof(offsetToName5) + sizeof(offsetToName5));
            ubyte unknown3;
            uint32 unknown4[3];
            uint32 nbOfData10;
            uint32 offsetToData10;
            if (offsetToData10 != 0)
            {
                FSeek(startof(offsetToData10) + offsetToData10);
                struct
                {
                    uint32 unknown1[3];
                    uint32 nbOfData;
                    uint32 offsetToData;
                    if (offsetToData != 0)
                    {
                        FSeek(startof(offsetToData) + offsetToData);
                        struct
                        {
                            uint32 unknown[7];
                        } data[nbOfData];
                        FSeek(startof(offsetToData) + sizeof(offsetToData));
                    }
                    uint32 unknown2[7];
                    ubyte unknown3;
                } data10[nbOfData10]<optimize=false>;
                FSeek(startof(offsetToData10) + sizeof(offsetToData10));
            }
        } records3[header.nbOfRecords3]<optimize=false>;
    } MainChunk;
}