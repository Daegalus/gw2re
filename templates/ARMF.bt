#include <PackFile.bt>

FSeek(0);
PackFile armfPackFile(0, FileSize());

if (armfPackFile.chunk.header.magic == "ARMF")
{
    FSeek(startof(armfPackFile.chunk.data));
    struct
    {
        struct
        {
            uint32 buildId;
            uint32 nbOfManifests;
            uint32 offsetToManifests;
        } header;

        FSeek(startof(header.offsetToManifests) + header.offsetToManifests);
        struct 
        {
            uint32 baseId;
            uint32 fileId;
            uint32 size;
            uint32 flags;
            uint32 offsetToName;
            FSeek(startof(offsetToName) + offsetToName);
            wstring name;
            FSeek(startof(offsetToName) + sizeof(offsetToName));
        } manifests[header.nbOfManifests]<optimize=false>;
    } armfChunk;
}
else if (armfPackFile.chunk.header.magic == "MFST")
{
    FSeek(startof(armfPackFile.chunk.data));
    struct
    {
        struct
        {
            uint32 buildId;
            uint32 nbOfRecords;
            uint32 offsetToRecords;
            uint32 nbOfStreams;
            uint32 offsetToStreams;
        } header;

        FSeek(startof(header.offsetToRecords) + header.offsetToRecords);
        struct 
        {
            uint32 baseId;
            uint32 fileId;
            uint32 size;
        } records[header.nbOfRecords];
        
        FSeek(startof(header.offsetToStreams) + header.offsetToStreams);
        struct 
        {
            uint32 parentBaseId;
            uint32 streamBaseId;
        } streams[header.nbOfStreams];
    } mfstChunk;
}