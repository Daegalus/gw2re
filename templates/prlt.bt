#include <FileReference.bt>
#include <PackFile.bt>

FSeek(0);
PackFile prltPackFile(0, FileSize());

if (prltPackFile.chunk.header.magic == "mfst")
{
    FSeek(startof(prltPackFile.chunk.data));
    struct
    {
        struct
        {
            uint32 nbOfRecords;
            uint32 offsetToRecords;
        } header;

        FSeek(startof(header.offsetToRecords) + header.offsetToRecords);
        struct 
        {
            uint32 unknown1;
            uint32 nbOfRecords1;
            uint32 offsetToRecords1;
            if (offsetToRecords1 != 0)
            {
                FSeek(startof(offsetToRecords1) + offsetToRecords1);
                struct
                {
                    uint32 unknown[6];
                } records1[nbOfRecords1]<optimize=false>;
                FSeek(startof(offsetToRecords1) + sizeof(offsetToRecords1));
            }
            uint32 nbOfRecords2;
            uint32 offsetToRecords2;
            if (offsetToRecords2 != 0)
            {
                FSeek(startof(offsetToRecords2) + offsetToRecords2);
                struct
                {
                    uint32 unknown1;
                    uint32 nbOfRecords;
                    uint32 offsetToRecords;
                    if (offsetToRecords != 0)
                    {
                        FSeek(startof(offsetToRecords) + offsetToRecords);
                        struct
                        {
                            uint32 offsetToFileReference;
                            FSeek(startof(offsetToFileReference) + offsetToFileReference);
                            FileReference fileReference<read=readFileReference>;
                            FSeek(startof(offsetToFileReference) + sizeof(offsetToFileReference));
                            uint32 unknown[2];
                        } records[nbOfRecords]<optimize=false>;
                        FSeek(startof(offsetToRecords) + sizeof(offsetToRecords));
                    }

                    uint32 unknown2[4];
                } records2[nbOfRecords2]<optimize=false>;
                FSeek(startof(offsetToRecords2) + sizeof(offsetToRecords2));
            }
        } records[header.nbOfRecords]<optimize=false>;
    } mfstChunk;
}